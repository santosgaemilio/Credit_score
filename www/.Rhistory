shiny::runApp('C:/Users/santo/My Programmer Stuff/BEDU/MODULO_05/Programacion-R-MASIVO-2021-main/Sesion-08/ShinnyApp01/ShinyApp01')
runApp('C:/Users/santo/My Programmer Stuff/BEDU/MODULO_05/Programacion-R-MASIVO-2021-main/Sesion-08/Ejemplo-01')
runApp('C:/Users/santo/My Programmer Stuff/BEDU/MODULO_05/Programacion-R-MASIVO-2021-main/Sesion-08/Ejemplo-02')
runApp('C:/Users/santo/My Programmer Stuff/BEDU/MODULO_05/Programacion-R-MASIVO-2021-main/Sesion-08/Ejemplo-02')
runApp('C:/Users/santo/My Programmer Stuff/BEDU/MODULO_05/Programacion-R-MASIVO-2021-main/Sesion-08/Reto-01/Reto01_Mio/Iris')
runApp('C:/Users/santo/My Programmer Stuff/BEDU/MODULO_05/Programacion-R-MASIVO-2021-main/Sesion-08/Reto-01/Reto01_Mio/Iris')
runApp('C:/Users/santo/My Programmer Stuff/BEDU/MODULO_05/Programacion-R-MASIVO-2021-main/Sesion-08/Reto-01/Reto01_Mio/Iris')
runApp('C:/Users/santo/My Programmer Stuff/BEDU/MODULO_05/Programacion-R-MASIVO-2021-main/Sesion-08/Ejemplo-03')
install.packages("bslib")
install.packages("bslib")
install.packages("remotes")
# Install using the remotes package
remotes::install_github("rstudio/shinyuieditor")
pkgbuild::check_build_tools(debug = TRUE)
remotes::install_github("rstudio/shinyuieditor")
shinyuieditor::launch_editor(app_loc = "tabs/",                             app_preview = TRUE,                             show_logs = TRUE)
library(shinyuieditor)
shinyuieditor::launch_editor(app_loc = "tabs/",app_preview = TRUE,show_logs = TRUE)
getwd()
shiny::runApp('C:/Users/santo/My Programmer Stuff/BEDU/MODULO_05/Programacion-R-MASIVO-2021-main/Sesion-08/Reto-01/Reto01_Mio/credit_score')
runApp('C:/Users/santo/My Programmer Stuff/BEDU/Projecto_Portafolio/credit_score')
runApp('C:/Users/santo/My Programmer Stuff/BEDU/Projecto_Portafolio/credit_score')
runApp('C:/Users/santo/My Programmer Stuff/BEDU/Projecto_Portafolio/credit_score')
runApp('C:/Users/santo/My Programmer Stuff/BEDU/Projecto_Portafolio/credit_score')
shiny::runApp('C:/Users/santo/My Programmer Stuff/BEDU/Projecto_Portafolio/credit_score')
runApp('C:/Users/santo/My Programmer Stuff/BEDU/Projecto_Portafolio/credit_score')
runApp('C:/Users/santo/My Programmer Stuff/BEDU/Projecto_Portafolio/credit_score')
runApp('C:/Users/santo/My Programmer Stuff/BEDU/Projecto_Portafolio/credit_score')
getwd()
runApp('C:/Users/santo/My Programmer Stuff/BEDU/Projecto_Portafolio/credit_score')
runApp('C:/Users/santo/My Programmer Stuff/BEDU/Projecto_Portafolio/credit_score')
runApp('C:/Users/santo/My Programmer Stuff/BEDU/Projecto_Portafolio/credit_score')
runApp('C:/Users/santo/My Programmer Stuff/BEDU/Projecto_Portafolio/credit_score')
runApp('C:/Users/santo/My Programmer Stuff/BEDU/Projecto_Portafolio/credit_score')
shiny::runApp('C:/Users/santo/My Programmer Stuff/BEDU/Projecto_Portafolio/credit_score')
runApp('C:/Users/santo/My Programmer Stuff/BEDU/Projecto_Portafolio/credit_score')
runApp('C:/Users/santo/My Programmer Stuff/BEDU/Projecto_Portafolio/credit_score')
runApp('C:/Users/santo/My Programmer Stuff/BEDU/Projecto_Portafolio/credit_score')
runApp('C:/Users/santo/My Programmer Stuff/BEDU/Projecto_Portafolio/credit_score')
load("C:/Users/santo/My Programmer Stuff/BEDU/Projecto_Portafolio/credit_score/www/.RData")
ggplot(df, aes(x = Income, y = `Credit Score`)) +
geom_point(alpha = 0.5, color = "#ffae80") +
geom_smooth(method = "lm", color = "#FF6A39") +
labs(title = "Relación entre Ingresos y Puntuación de Crédito", x = "Ingresos", y = "Puntuación de Crédito")
shiny::runApp('C:/Users/santo/My Programmer Stuff/BEDU/Projecto_Portafolio/credit_score')
runApp('C:/Users/santo/My Programmer Stuff/BEDU/Projecto_Portafolio/credit_score')
runApp('C:/Users/santo/My Programmer Stuff/BEDU/Projecto_Portafolio/credit_score')
141559 + 138297
setwd("C:/Users/santo/My Programmer Stuff/BEDU/Projecto_Portafolio/credit_score/www")
df <- read.csv("credit_scrore.csv")
df <- read.csv("credit_data.csv")
data_model <- select(df, Credit.Score, Income, Age, Number.of.Existing.Loans,
Credit.History.Length, Loan.Amount, Loan.Tenure, LTV.Ratio)
shiny::runApp('C:/Users/santo/My Programmer Stuff/BEDU/Projecto_Portafolio/credit_score')
GMatriz <- ggplot(cor_matrix_melted, aes(Var1, Var2, fill = value)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0) +
theme_minimal() +
coord_fixed() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) +
labs(x = "", y = "", title = "Matriz de Correlación")
numeric.df <- select(df, Age, Income,
Credit.Score,Credit.History.Length,
Number.of.Existing.Loans, Loan.Amount,
Loan.Tenure, LTV.Ratio, Profile.Score)
cor_matrix <- cor(numeric.df, use = "complete.obs")
cor_matrix_melted <- melt(cor_matrix)
GMatriz <- ggplot(cor_matrix_melted, aes(Var1, Var2, fill = value)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0) +
theme_minimal() +
coord_fixed() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) +
labs(x = "", y = "", title = "Matriz de Correlación")
GMatriz
ggsave("plots/GMatriz.png", plot = GMatriz)
GRIngresos <- ggplot(df, aes(x = Income, y = Credit.Score)) +
geom_point(alpha = 0.5, color = "#ffae80") +
theme_minimal() +
geom_smooth(method = "lm", color = "#000000") +
labs(title = "Relación entre Ingresos y Puntuación de Crédito", x = "Ingresos", y = "Puntuación de Crédito")
ggsave("plots/GRIngresos.png", plot = GRIngresos)
GRPerfil <- ggplot(df, aes(x = Profile.Score, y = Credit.Score)) +
geom_point(alpha = 0.5, color = "#ffae80") +
theme_minimal() +
geom_smooth(method = "lm", color = "#000000") +
labs(title = "Relación entre Puntuación de Perfil y Puntuación de Crédito", x = "Puntuación de Perfil", y = "Puntuación de Crédito")
ggsave("plots/GRPrefil.png", plot = GRPerfil)
GRPrestamo <- ggplot(df, aes(x = LTV.Ratio, y = Profile.Score)) +
geom_point(alpha = 0.5, color = "#ffae80") +
theme_minimal() +
geom_smooth(method = "lm", color = "#000000") +
labs(title = "Relación entre el préstamo-valor y la puntuación de perfil", x = "Préstamo valor", y = "Puntuación de perfil")
ggsave("plots/GRPrestamo.png", plot = GRPrestamo)
runApp('C:/Users/santo/My Programmer Stuff/BEDU/Projecto_Portafolio/credit_score')
runApp('C:/Users/santo/My Programmer Stuff/BEDU/Projecto_Portafolio/credit_score')
runApp('C:/Users/santo/My Programmer Stuff/BEDU/Projecto_Portafolio/credit_score')
runApp('C:/Users/santo/My Programmer Stuff/BEDU/Projecto_Portafolio/credit_score')
GRPerfil <- ggplot(df, aes(x = Profile.Score, y = Credit.Score)) +
geom_point(alpha = 0.5, color = "#ffae80") +
theme_minimal() +
geom_smooth(method = "lm", color = "#000000") +
labs(title = "Relación entre Puntuación de Perfil y Puntuación de Crédito", x = "Puntuación de Perfil", y = "Puntuación de Crédito")
ggsave("plots/GRPrefil.png", plot = GRPerfil)
runApp('C:/Users/santo/My Programmer Stuff/BEDU/Projecto_Portafolio/credit_score')
df_filtred <- df_filtred %>%
mutate(`Profile Score` = `Profile Score` / 100)
df_filtered <- base::copy(df)
df_filtered <- data.frame(df)
df_filtred <- df_filtred %>%
mutate(`Profile Score` = `Profile Score` / 100)
df_filtered <- df_filtred %>%
mutate(`Profile Score` = `Profile Score` / 100)
df_filtered <- df_filtered %>%
mutate(`Profile Score` = `Profile Score` / 100)
df_filtered <- df_filtered %>%
mutate(Profile.Score = Profile.Score / 100)
df_filtred <- df_filtred %>%
mutate(LTV.Ratio = LTV.Ratio / 100)
df_filtered <- df_filtered %>%
mutate(LTV.Ratio = LTV.Ratio / 100)
library(randomForest)
install.packages("randomForest")
library(randomForest)
numericas <- c(Income, Credit.Score, Credit.History.Length, Loan.Amount, Loan.Tenure, LTV.Ratio, Age, Number.of.Existing.Loans)
numericas <- c('Income', 'Credit Score', 'Credit History Length', 'Loan Amount', 'Loan Tenure', 'LTV Ratio', 'Age', 'Number of Existing Loans')
categoricas <- c('Employment Profile', 'Occupation', 'Gender', 'Existing Customer')
for (col in categoricas) {
df_filtered[[col]] <- as.numeric(factor(df_filtered[[col]]))
}
for (col in categoricas) {
df_filtered[col] <- as.numeric(factor(df_filtered[col]))
}
for (col in categoricas) {
df_filtered[[col]] <- as.numeric(factor(df_filtered[[col]]))
}
for (col in categoricas) {
# Convert factor to character, then to numeric
df_filtered[[col]] <- as.numeric(as.character(df_filtered[[col]]))
}
df_filtered[categoricas] <- lapply(df_filtered[categoricas], function(x) as.factor(x))
df_filtered.head()
head(df_filtered)
numericas <- c('Income', 'Credit.Score', 'Credit.History.Length', 'Loan.Amount', 'Loan.Tenure', 'LTV.Ratio', 'Age', 'Number.of.Existing.Loans')
categoricas <- c('Employment.Profile', 'Occupation', 'Gender', 'Existing.Customer')
df_filtered[categoricas] <- lapply(df_filtered[categoricas], function(x) as.factor(x))
df_filtered[numericas] <- scale(df_filtered[numericas])
predictors <- c(numericas + categoricas)
predictors <- c(numericas, categoricas)
predictors
target <- "Profile.Score"
set.seed(123)
install.packages("caret")
library(caret)
train_indices <- createDataPartition(df_filtered[[target]], p = 0.65, list = FALSE)
train_data <- df_filtered[train_indices, ]
test_data <- df_filtered[-train_indices, ]
modelRF <- randomForest(train_data[, predictors], train_data[[target]], ntree = 15, seed = 100)
df_filtered <- na.omit(df_filtered)
train_indices <- createDataPartition(df_filtered[[target]], p = 0.65, list = FALSE)
train_data <- df_filtered[train_indices, ]
test_data <- df_filtered[-train_indices, ]
modelRF <- randomForest(train_data[, predictors], train_data[[target]], ntree = 15, seed = 100)
View(train_indices)
View(modelRF)
predictions <- predict(modelRF, test_data[, predictors])
mse <- mean((predictions - test_data[, target])^2)
mse
realvalues <- test_data[, predictors]
mean_real <- mean(realvalues)
total_variance <- sum(realvalues - mean_real)^2)
View(realvalues)
view(predictions)
predictions
realvalues <- test_data[, target]
mean_real <- mean(realvalues)
total_variance <- sum(realvalues - mean_real)^2)
mean_real <- mean(realvalues)
total_variance <- sum((realvalues - mean_real)^2)
residual_variance <- sum((realvalues - predictions)^2)
r_squared <- 1 - (residual_variance / total_variance)
r_squared
saveRDS(modelRF, "models/randomForest.rds")
View(df_filtered)
View(df_filtered)
View(train_data)
predictors
test <- list(
"Income" = 0.5,
"Credit.Score" = 1.4,
"Credit.History.Length" = 0.45,
"Loan.Amount" = 0.34,
"Loan.Tenure" = 0.9,
"LTV.Ratio" = 0.8,
"Age" = 1.234,
"Number.of.Existing.Loans" = 0.103,
"Employment.Profile" = "Salaried",
"Occupation" = "Doctor",
"Gender" = "Male",
"Existing.Customer" = "Yes"
)
testdf <- as.data.frame(t(test))
colnames(testdf) <- names(test)
predict(modelRF, testdf)
View(testdf)
View(test_data)
test <- list(
"Income" = 0.5,
"Credit.Score" = 1.4,
"Credit.History.Length" = 0.45,
"Loan.Amount" = 0.34,
"Loan.Tenure" = 0.9,
"LTV.Ratio" = 0.8,
"Age" = 1.234,
"Number.of.Existing.Loans" = 0.103,
"Employment.Profile" = 2,
"Occupation" = 10,
"Gender" = 1,
"Existing.Customer" = 1,
)
test <- list(
"Income" = 0.5,
"Credit.Score" = 1.4,
"Credit.History.Length" = 0.45,
"Loan.Amount" = 0.34,
"Loan.Tenure" = 0.9,
"LTV.Ratio" = 0.8,
"Age" = 1.234,
"Number.of.Existing.Loans" = 0.103,
"Employment.Profile" = 2,
"Occupation" = 10,
"Gender" = 1,
"Existing.Customer" = 1,
"State" = "Kamataka",
"City" = "Mysuru"
)
testdf <- as.data.frame(t(test))
colnames(testdf) <- names(test)
predict(modelRF, testdf)
View(testdf)
runApp('C:/Users/santo/My Programmer Stuff/BEDU/Projecto_Portafolio/credit_score')
data_cluster <- select(df, Income, Age, Credit.Score, Number.of.Existing.Loans, Loan.Amount)
data_cluster <- na.omit(data_cluster)
data_cluster_scaled <- scale(data_cluster)
set.seed(123)
kmeans_result <- kmeans(data_cluster_scaled, centers = 4, nstart = 25)
fviz_cluster(kmeans_result, data = data_cluster_scaled)
kmeans_result
fviz_cluster(kmeans_result, data = data_cluster_scaled)
dev.off()
fviz_cluster(kmeans_result, data = data_cluster_scaled)
fviz_cluster(
kmeans_result,
data = data_cluster_scaled,
geom = "point",
palette = "jco",
addEllipses = TRUE,
addCentroid = TRUE,
repel = TRUE,
main = "K-means Clustering Visualization"
)
fviz_cluster(
kmeans_result,
data = data_cluster_scaled,
geom = "polygon",  # Keep only polygons
pointsize = 0,     # Remove points
label = "none",    # Remove labels
ggtheme = theme_minimal(),  # Minimal theme
palette = c("blue", "red", "green"),  # Primary color palette
show.clust.cent = FALSE,  # Hide cluster centers
main = "Clusters de clientes"
)
fviz_cluster(
kmeans_result,
data = data_cluster_scaled,
geom = "polygon",  # Keep only polygons
pointsize = 0,     # Remove points
label = "none",    # Remove labels
ggtheme = theme_minimal(),  # Minimal theme
palette = c("blue", "red", "green", "orange"),  # Primary color palette
show.clust.cent = FALSE,  # Hide cluster centers
main = "Clusters de clientes"
)
fviz_cluster(
kmeans_result,
data = data_cluster_scaled,
geom = "polygon",  # Keep only polygons
pointsize = 0,     # Remove points
label = "none",    # Remove labels
ggtheme = theme_minimal(),  # Minimal theme
palette = c("blue", "red", "green", "orange"),  # Primary color palette
show.clust.cent = FALSE,  # Hide cluster centers
labs(x = "", y = ""),  # Set x and y labels to empty strings
main = "K-means Clustering Visualization"
)
fviz_cluster(
kmeans_result,
data = data_cluster_scaled,
geom = "polygon",  # Keep only polygons
pointsize = 0,     # Remove points
label = "none",    # Remove labels
ggtheme = theme_minimal(),  # Minimal theme
palette = c("blue", "red", "green", "orange"),  # Primary color palette
show.clust.cent = FALSE,  # Hide cluster centers
labs(x = "", y = ""),  # Set x and y labels to empty strings
main = "Clusters de clientes"
)
fviz_cluster(
kmeans_result,
data = data_cluster_scaled,
geom = "polygon",
pointsize = 0,
label = "none",
ggtheme = theme_minimal(),
palette = c("blue", "red", "green", "orange"),
show.clust.cent = FALSE,
main = "Clusters de clientes",
labs(x = "", y = "")
)
fviz_cluster(
kmeans_result,
data = data_cluster_scaled,
geom = "polygon",
pointsize = 0,
label = "none",
ggtheme = theme_minimal(),
palette = c("blue", "red", "green", "orange"),
show.clust.cent = FALSE,
main = "Clusters de clientes"
)
fviz_cluster(
kmeans_result,
data = data_cluster_scaled,
geom = "polygon",
pointsize = 0,
label = "none",
ggtheme = theme_minimal(),
palette = c("blue", "red", "green", "orange"),
show.clust.cent = FALSE,
main = "Clusters de clientes",
xlab = "",
)
fviz_cluster(
kmeans_result,
data = data_cluster_scaled,
geom = "polygon",
pointsize = 0,
label = "none",
ggtheme = theme_minimal(),
palette = c("blue", "red", "green", "orange"),
show.clust.cent = FALSE,
main = "Clusters de clientes",
xlab = "",
ylab = ""
)
Kmeans <- fviz_cluster(
kmeans_result,
data = data_cluster_scaled,
geom = "polygon",
pointsize = 0,
label = "none",
ggtheme = theme_minimal(),
palette = c("blue", "red", "green", "orange"),
show.clust.cent = FALSE,
main = "Clusters de clientes",
xlab = "",
ylab = ""
)
savePlot("plots/Kmeans.png", plot = Kmeans)
savePlot("plots/Kmeans.png", plot = Kmeans)
ggsave("plots/Kmeans.png", plot = Kmeans)
